str_replace_all(strspec, "'", "''")
# Get species ID
if (!("Species" %in% colnames(dt)) || is.na(dt$Species)) {
strspec <- "Leach's Storm-Petrel"
} else {
strspec <- dt$Species
}
strspec
# Escape single quotes in species name with two single quotes
strspec <- str_replace_all(strspec, "'", "''")
strspec
# Lookup species
strsql <- paste0("SELECT tblSpeciesInfo.SpecInfoID FROM tblSpeciesInfo ",
"WHERE (((tblSpeciesInfo.English)='", strspec, "'));")
res <- RODBC::sqlQuery(ch, strsql) %>% ensure_data_is_returned
res <- RODBC::sqlQuery(ch, strsql) %>% ensure_data_is_returned %>%
ensure_one_row_returned
specID <- res$SpecInfoID
# Get colony
if (!("Colony" %in% colnames(dt)) || is.na(dt$Colony)) {
strColony <- "Gull Island"
} else {
strColony <- dt$Colony
}
strColony
# Escape single quotes in species name with two single quotes
strColony <- stringr::str_replace_all(strColony, "'", "''")
# Lookup species
strsql <- paste0("SELECT lkpColony.ID FROM lkpColony ",
"WHERE (((lkpColony.ColonyName)='", strColony, "'));")
res <- RODBC::sqlQuery(ch, strsql) %>% ensure_data_is_returned %>%
ensure_one_row_returned
colID <- res$ID
colID
# Get sex
if (!("Sex" %in% colnames(dt)) || is.na(dt$Sex)) {
strSex <- "U"
} else {
strSex <- dt$Sex
}
# Insert tblBirds record
strsql <- paste0("INSERT INTO tblBirds ( [BandNo], [Species], [Sex], ",
"[Colony], [AgeAtBanding]) SELECT ",
"'", dt$Band, "' AS e1, ",
specID, " AS e2, ",
"'", strSpec, "' AS e3, ",
"'", strColony, "' AS e4, ",
"'", strAge, "' AS e5;")
# Get species ID
if (!("Species" %in% colnames(dt)) || is.na(dt$Species)) {
strSpec <- "Leach's Storm-Petrel"
} else {
strSpec <- dt$Species
}
# Escape single quotes in species name with two single quotes
strSpec <- stringr::str_replace_all(strSpec, "'", "''")
# Lookup species
strsql <- paste0("SELECT tblSpeciesInfo.SpecInfoID FROM tblSpeciesInfo ",
"WHERE (((tblSpeciesInfo.English)='", strSpec, "'));")
res <- RODBC::sqlQuery(ch, strsql) %>% ensure_data_is_returned %>%
ensure_one_row_returned
specID <- res$SpecInfoID
# Insert tblBirds record
strsql <- paste0("INSERT INTO tblBirds ( [BandNo], [Species], [Sex], ",
"[Colony], [AgeAtBanding]) SELECT ",
"'", dt$Band, "' AS e1, ",
specID, " AS e2, ",
"'", strSex, "' AS e3, ",
"'", strColony, "' AS e4, ",
"'", strAge, "' AS e5;")
# Get Age - assume adult by default
if (!("Age" %in% colnames(dt)) || is.na(dt$Age)) {
strAge <- "A"
} else {
strAge <- dt$Age
}
# Insert tblBirds record
strsql <- paste0("INSERT INTO tblBirds ( [BandNo], [Species], [Sex], ",
"[Colony], [AgeAtBanding]) SELECT ",
"'", dt$Band, "' AS e1, ",
specID, " AS e2, ",
"'", strSex, "' AS e3, ",
"'", strColony, "' AS e4, ",
"'", strAge, "' AS e5;")
res <- RODBC::sqlQuery(ch, strsql) %>% ensure_insert_success
# Insert tblBirds record
strsql <- paste0("INSERT INTO tblBirds ( [BandNo], [Species], [Sex], ",
"[Colony], [AgeAtBanding]) SELECT ",
"'", dt$Band, "' AS e1, ",
specID, " AS e2, ",
"'", strSex, "' AS e3, ",
colID, " AS e4, ",
"'", strAge, "' AS e5;")
res <- RODBC::sqlQuery(ch, strsql) %>% ensure_insert_success
# Create tblBands record. This shouldn't really be done here... bands
# should exist in the database apriori
message("\tCreating tblBands record...")
strsql <- paste0("INSERT INTO tblBands ( [BandNo]) SELECT ",
"'", dt$Band, "' AS e1;")
res <- RODBC::sqlQuery(ch, strsql) %>% ensure_insert_success
message("done\n")
dt$Band <- "Remove_me"
# Create tblBands record. This shouldn't really be done here... bands
# should exist in the database apriori
message("\tCreating tblBands record...")
strsql <- paste0("INSERT INTO tblBands ( [BandNo]) SELECT ",
"'", dt$Band, "' AS e1;")
res <- RODBC::sqlQuery(ch, strsql) %>% ensure_insert_success
message("done\n")
# create a tblBirds record
message("\tCreating tblBirds record...")
# Get species ID
if (!("Species" %in% colnames(dt)) || is.na(dt$Species)) {
strSpec <- "Leach's Storm-Petrel"
} else {
strSpec <- dt$Species
}
# Escape single quotes in species name with two single quotes
strSpec <- stringr::str_replace_all(strSpec, "'", "''")
# Lookup species
strsql <- paste0("SELECT tblSpeciesInfo.SpecInfoID FROM tblSpeciesInfo ",
"WHERE (((tblSpeciesInfo.English)='", strSpec, "'));")
res <- RODBC::sqlQuery(ch, strsql) %>% ensure_data_is_returned %>%
ensure_one_row_returned
specID <- res$SpecInfoID
# Get colony
if (!("Colony" %in% colnames(dt)) || is.na(dt$Colony)) {
strColony <- "Gull Island"
} else {
strColony <- dt$Colony
}
# Escape single quotes in species name with two single quotes
strColony <- stringr::str_replace_all(strColony, "'", "''")
# Lookup species
strsql <- paste0("SELECT lkpColony.ID FROM lkpColony ",
"WHERE (((lkpColony.ColonyName)='", strColony, "'));")
res <- RODBC::sqlQuery(ch, strsql) %>% ensure_data_is_returned %>%
ensure_one_row_returned
colID <- res$ID
# Get sex
if (!("Sex" %in% colnames(dt)) || is.na(dt$Sex)) {
strSex <- "U"
} else {
strSex <- dt$Sex
}
# Get Age - assume adult by default
if (!("Age" %in% colnames(dt)) || is.na(dt$Age)) {
strAge <- "A"
} else {
strAge <- dt$Age
}
# Insert tblBirds record
strsql <- paste0("INSERT INTO tblBirds ( [BandNo], [Species], [Sex], ",
"[Colony], [AgeAtBanding]) SELECT ",
"'", dt$Band, "' AS e1, ",
specID, " AS e2, ",
"'", strSex, "' AS e3, ",
colID, " AS e4, ",
"'", strAge, "' AS e5;")
strsql
res <- RODBC::sqlQuery(ch, strsql) %>% ensure_insert_success
message("done\n")
# get bird ID
birdID <- get_sql_ID(ch)
source("C:/Local files/Burrow_Logger/Software/pitr/R/misc.R", echo=TRUE)
# get bird ID
birdID <- get_sql_ID(ch)
res <- RODBC::sqlQuery(ch, strsql) %>% ensure_insert_success
message("done\n")
# get bird ID
birdID <- get_sql_ID(ch)
# Fill in chick ID of the nest attempt
#### look for nest attempt record ####
message("\tBird is a chick...finding tblNestAttempt record...")
# Fill in chick ID of the nest attempt
#### look for nest attempt record ####
message("\tBird is a chick...finding tblNestAttempt record...")
strsql <- with(dt, paste0("SELECT tblNestAttempt.NestAttmpID FROM ",
"tblNestAttempt WHERE (((tblNestAttempt.BurrowID) = '", Burrow,
"') AND ((tblNestAttempt.Yr) = ", lubridate::year(Date),"));"))
strsql <- with(dt, paste0("SELECT tblNestAttempt.NestAttmpID FROM ",
"tblNestAttempt WHERE (((tblNestAttempt.BurrowID) = '", dt$Burrow,
"') AND ((tblNestAttempt.Yr) = ", lubridate::year(Date),"));"))
strsql <- paste0("SELECT tblBands.BandNo FROM tblBands WHERE ",
"(((tblBands.BandNo)='", dt$Band, "'));")
strsql <- paste0("SELECT tblBands.BandNo FROM tblBands WHERE ",
"(((tblBands.BandNo)='", dt$Band, "'));")
res <- RODBC::sqlQuery(ch, strsql) %>% ensure_data_is_returned
res
# Get capture type - default "In burrow by hand"
if (!("CaptureType" %in% colnames(dt)) || is.na(dt$CaptureType)) {
strCapType <- "In burrow by hand"
} else {
strCapType <- dt$CaptureType
}
# Lookup capture type
strsql <- paste0("SELECT lkpCaptureType.ID FROM lkpCaptureType ",
"WHERE (((lkpCaptureType.CaptureType)='", strCapType, "'));")
strsql
res <- RODBC::sqlQuery(ch, strsql) %>% ensure_data_is_returned %>%
ensure_one_row_returned
res
capID <- res$ID
#### create a tblCapture record ####
message("\tCreating tblCapture record...")
strsql <- with(dt, paste0("INSERT INTO tblCapture ( [BirdID], [Date], [CaptureType], [Note]) SELECT ",
birdID, " AS e1, ",
"#", format(Date, format = "%Y-%b-%d"), "# AS e2, ",
capID, " AS e3, ",
do_note(strNote), " AS e4;"))
dt$Date = now()
dt$Date = Date()
dt$Date = date()
strsql <- with(dt, paste0("INSERT INTO tblCapture ( [BirdID], [Date], [CaptureType], [Note]) SELECT ",
birdID, " AS e1, ",
"#", format(Date, format = "%Y-%b-%d"), "# AS e2, ",
capID, " AS e3, ",
do_note(strNote), " AS e4;"))
# Setup Note
if (!("Note" %in% colnames(dt)) || is.na(dt$CaptureType)) {
strNote <- NA
} else {
strNote <- dt$Note
}
#### create a tblCapture record ####
message("\tCreating tblCapture record...")
strsql <- with(dt, paste0("INSERT INTO tblCapture ( [BirdID], [Date], [CaptureType], [Note]) SELECT ",
birdID, " AS e1, ",
"#", format(Date, format = "%Y-%b-%d"), "# AS e2, ",
capID, " AS e3, ",
do_note(strNote), " AS e4;"))
strsql <- with(dt, paste0("INSERT INTO tblCapture ( [BirdID], [Date], ",
"[CaptureType], [Note]) SELECT ",
birdID, " AS e1, ",
"#", format(Date, format = "%Y-%b-%d"), "# AS e2, ",
capID, " AS e3, ",
do_note(strNote), " AS e4;"))
strsql
res <- RODBC::sqlQuery(ch, strsql) %>% ensure_insert_success
format(dt$Date, format = "%Y-%b-%d")
str(dt)
date()
dt$Date <- lubridate::now()
format(dt$Date, format = "%Y-%b-%d")
strsql <- with(dt, paste0("INSERT INTO tblCapture ( [BirdID], [Date], ",
"[CaptureType], [Note]) SELECT ",
birdID, " AS e1, ",
"#", format(Date, format = "%Y-%b-%d"), "# AS e2, ",
capID, " AS e3, ",
do_note(strNote), " AS e4;"))
res <- RODBC::sqlQuery(ch, strsql) %>% ensure_insert_success
dt
strsql <- with(dt, paste0("INSERT INTO tblCapture ( [BirdID], [Date], ",
"[BurrowID], [CaptureType], [Note]) SELECT ",
birdID, " AS e1, ",
"#", format(Date, format = "%Y-%b-%d"), "# AS e2, ",
dt$Burrow, " As e3, ",
capID, " AS e4, ",
do_note(strNote), " AS e5;"))
res <- RODBC::sqlQuery(ch, strsql) %>% ensure_insert_success
strsql <- with(dt, paste0("INSERT INTO tblCapture ( [BirdID], [Date], ",
"[BurrowID], [CaptureType], [Note]) SELECT ",
birdID, " AS e1, ",
"#", format(Date, format = "%Y-%b-%d"), "# AS e2, ",
Burrow, " As e3, ",
capID, " AS e4, ",
do_note(strNote), " AS e5;"))
dt
dt$Burrow <- "P1"
strsql <- with(dt, paste0("INSERT INTO tblCapture ( [BirdID], [Date], ",
"[BurrowID], [CaptureType], [Note]) SELECT ",
birdID, " AS e1, ",
"#", format(Date, format = "%Y-%b-%d"), "# AS e2, ",
Burrow, " As e3, ",
capID, " AS e4, ",
do_note(strNote), " AS e5;"))
res <- RODBC::sqlQuery(ch, strsql) %>% ensure_insert_success
strsql <- with(dt, paste0("INSERT INTO tblCapture ( [BirdID], [Date], ",
"[BurrowID], [CaptureType], [Note]) SELECT ",
birdID, " AS e1, ",
"#", format(Date, format = "%Y-%b-%d"), "# AS e2, ",
"'", Burrow, "' As e3, ",
capID, " AS e4, ",
do_note(strNote), " AS e5;"))
res <- RODBC::sqlQuery(ch, strsql) %>% ensure_insert_success
res <- RODBC::sqlQuery(ch, strsql) %>% ensure_insert_success
res
message("done\n")
# get Capture ID
captureID <- get_sql_ID(ch)
strsql <- with(dt, paste0("INSERT INTO tblMorpho ( [CaptureID], [BirdPlusBagWt],",
" [BagWt], [BirdWt], [Wing], [Tarsus]) SELECT ",
captureID, " AS e1, ",
do_na(TotW), " AS e2, ",
do_na(BagW), " AS e3, ",
do_na(TotW) - BagW, " AS e4, ",
do_na(Wing), " AS e5, ",
do_na(Tarsus), " AS e6;"))
source("C:/Local files/Burrow_Logger/Software/pitr/R/misc.R", echo=TRUE)
strsql <- with(dt, paste0("INSERT INTO tblMorpho ( [CaptureID], [BirdPlusBagWt],",
" [BagWt], [BirdWt], [Wing], [Tarsus]) SELECT ",
captureID, " AS e1, ",
do_na(TotW), " AS e2, ",
do_na(BagW), " AS e3, ",
do_na(TotW) - BagW, " AS e4, ",
do_na(Wing), " AS e5, ",
do_na(Tarsus), " AS e6;"))
str(dt$Band)
str(dt["Age",])
str(dt[, "Age"])
not_exist_or_na <- function(dat, colnm) {
if (!(colnm %in% colnames(dat)) || is.na(dat[, colnm])) TRUE
else FALSE
}
?missing
?nothing
# return value of a dataframe column or NA if it either doesn't exist or is NA
val_or_NA <- function(dat, colnm) {
if (not_exist_or_na(dat, colnm)) NA
else dat[, colnm]
}
# Deal with missing or NA columns
dt <- dplyr::mutate(dt,
Totw = val_or_NA(dt, "Totw"))
# Deal with missing or NA columns
dt <- dplyr::mutate(dt,
Totw = val_or_NA(dt, "Totw"),
Bagw = val_or_NA(dt, "Bagw"),
Wingw = val_or_NA(dt, "Wingw"),
Tarsus = val_or_NA(dt, "Tarsus"),
Note = val_or_NA(dt, "Note"))
dt
#### create a tblMorpho record ####
message("\tCreating tblMorph record...")
strsql <- with(dt, paste0("INSERT INTO tblMorpho ( [CaptureID], [BirdPlusBagWt],",
" [BagWt], [BirdWt], [Wing], [Tarsus]) SELECT ",
captureID, " AS e1, ",
do_na(TotW), " AS e2, ",
do_na(BagW), " AS e3, ",
do_na(TotW) - BagW, " AS e4, ",
do_na(Wing), " AS e5, ",
do_na(Tarsus), " AS e6;"))
names(dt)
# Deal with missing or NA columns
dt <- dplyr::mutate(dt,
Totw = val_or_NA(dt, "Totw"),
Bagw = val_or_NA(dt, "Bagw"),
Wing = val_or_NA(dt, "Wing"),
Tarsus = val_or_NA(dt, "Tarsus"),
Note = val_or_NA(dt, "Note"))
strsql <- with(dt, paste0("INSERT INTO tblMorpho ( [CaptureID], [BirdPlusBagWt],",
" [BagWt], [BirdWt], [Wing], [Tarsus]) SELECT ",
captureID, " AS e1, ",
do_na(TotW), " AS e2, ",
do_na(BagW), " AS e3, ",
do_na(TotW) - BagW, " AS e4, ",
do_na(Wing), " AS e5, ",
do_na(Tarsus), " AS e6;"))
# Deal with missing or NA columns
dt <- dplyr::mutate(dt,
TotW = val_or_NA(dt, "TotW"),
BagW = val_or_NA(dt, "BagW"),
Wing = val_or_NA(dt, "Wing"),
Tarsus = val_or_NA(dt, "Tarsus"),
Note = val_or_NA(dt, "Note"))
dt$Totw <- NULL
dt$Bagw <- NULL
dt
dt$Wingw <- NULL
ls
strsql <- with(dt, paste0("INSERT INTO tblCapture ( [BirdID], [Date], ",
"[BurrowID], [CaptureType], [Note]) SELECT ",
birdID, " AS e1, ",
"#", format(Date, format = "%Y-%b-%d"), "# AS e2, ",
"'", Burrow, "' As e3, ",
capID, " AS e4, ",
do_note(strNote), " AS e5;"))
strsql
strsql <- with(dt, paste0("INSERT INTO tblMorpho ( [CaptureID], [BirdPlusBagWt],",
" [BagWt], [BirdWt], [Wing], [Tarsus]) SELECT ",
captureID, " AS e1, ",
do_na(TotW), " AS e2, ",
do_na(BagW), " AS e3, ",
do_na(TotW) - BagW, " AS e4, ",
do_na(Wing), " AS e5, ",
do_na(Tarsus), " AS e6;"))
!with(dt, all(is.na(Tarsus), is.na(Totw), is.na(BagW), is.na(Wing)))
!with(dt, all(is.na(Tarsus), is.na(TotW), is.na(BagW), is.na(Wing)))
dt$PIT_deployed <- "0062000127"
#### create a tblTag record ####
strsql <- paste0("SELECT tblTags.TagID FROM tblTags WHERE (((tblTags.TagID)='",
dt$PIT_deployed, "'));")
res <- RODBC::sqlQuery(ch, strsql) %>% ensure_data_is_returned
res
str(res)
?message
# Make sure manufacturer and TagType are provided
if (not_exist_or_na(dt, "Manufac") || not_exist_or_na(dt, "TagType")) {
message("One or both of Manufacurer or TagType is missing!",
"Cannot add PIT tag to tblTags nor deploy on bird.")
} else {
# insert tag into database - quick and dirty should be looked up.
strsql <- paste0("INSERT INTO tblTags ( [TagID], [Manufac], [Type]) SELECT ",
"'", dt$PIT_deployed, "' AS e1,",
ifelse(dat$PIT[1:3] == "062", 2, -1293520891L), " AS e2, ",
ifelse(dat$PIT[1:3] == "062", 2, -940491536L), " AS e3; "
)
res <- RODBC::sqlQuery(ch, strsql) %>% ensure_insert_success
message("done\n")
}
val_or_NA
strManufac <- val_or_NA(dt, "Manufac")
strTagType <- val_or_NA(dt, "TagType")
dt$Manufac <- "CoreRFID"
dt$TagType <- "10mm PIT"
strManufac <- val_or_NA(dt, "Manufac")
strTagType <- val_or_NA(dt, "TagType")
# Look up manufacturer ID
strsql <- paste0("SELECT lkpManufacturers.ID FROM lkpManufacturers ",
"WHERE (((lkpManufacturers.ManufName)='", strManufac, "'));")
res <- RODBC::sqlQuery(ch, strsql) %>% ensure_data_is_returned %>%
ensure_one_row_returned
manufacID <- res$ID
# Look up tagtype
strsql <- paste0("SELECT lkpTagTypes.ID FROM lkpTagTypes ",
"WHERE (((lkpTagTypes.TagType)='", strTagType, "'));")
res <- RODBC::sqlQuery(ch, strsql) %>% ensure_data_is_returned %>%
ensure_one_row_returned
tagtypeID <- res$ID
# insert tag into database - quick and dirty should be looked up.
strsql <- paste0("INSERT INTO tblTags ( [TagID], [Manufac], [Type]) SELECT ",
"'", dt$PIT_deployed, "' AS e1,",
manufacID, " AS e2, ",
tagtypeID, " AS e3; "
)
strsql
res <- RODBC::sqlQuery(ch, strsql) %>% ensure_insert_success
dt
dt$PIT_deployed <- "abcd"
# insert tag into database - quick and dirty should be looked up.
strsql <- paste0("INSERT INTO tblTags ( [TagID], [Manufac], [Type]) SELECT ",
"'", dt$PIT_deployed, "' AS e1,",
manufacID, " AS e2, ",
tagtypeID, " AS e3; "
)
res <- RODBC::sqlQuery(ch, strsql) %>% ensure_insert_success
message("done\n")
dt$PIT_deployed <- "0062000127"
strsql <- with(dt, paste0("INSERT INTO tblTagDeployment ( [TagID], [DeployCap]) SELECT ",
"'", PIT, "' AS e1, ",
captureID, " AS e2;"))
strsql <- with(dt, paste0("INSERT INTO tblTagDeployment ( [TagID], [DeployCap]) SELECT ",
"'", PIT_deployed, "' AS e1, ",
captureID, " AS e2;"))
strsql
!not_exist_or_na(dt, "PIT_deployed")
dt
strsql <- with(dt, paste0("INSERT INTO tblTagDeployment ( [TagID], [DeployCap]) SELECT ",
"'", PIT_deployed, "' AS e1, ",
captureID, " AS e2;"))
res <- RODBC::sqlQuery(ch, strsql) %>% ensure_insert_success
strsql
# Look up the tag deployment record
strsql <- paste0("SELECT tblTagDeployment.ID FROM tblTagDeployment WHERE ",
"(((tblTagDeployment.TagID)='", dt$PIT_removed, "'));")
dt$PIT_removed <- "041a1f19bf"
!not_exist_or_na(dt, "PIT_removed")
# Look up the tag deployment record
strsql <- paste0("SELECT tblTagDeployment.ID FROM tblTagDeployment WHERE ",
"(((tblTagDeployment.TagID)='", dt$PIT_removed, "'));")
res <- RODBC::sqlQuery(ch, strsql) %>% ensure_data_is_returned
res
captureID
deplID <- res$ID
# set the RemoveCap field to captureID
strsql <- paste0("UPDATE tblTagDeployment SET tblTagDeployment.RemoveCap = ",
captureID, "WHERE (((tblTagDeployment.ID)=", deplID)
strsql
# set the RemoveCap field to captureID
strsql <- paste0("UPDATE tblTagDeployment SET tblTagDeployment.RemoveCap = ",
captureID, " WHERE (((tblTagDeployment.ID)=", deplID)
res <- RODBC::sqlQuery(ch, strsql) %>% ensure_data_is_returned
# set the RemoveCap field to captureID
strsql <- paste0("UPDATE tblTagDeployment SET tblTagDeployment.RemoveCap = ",
captureID, " WHERE (((tblTagDeployment.ID)=", deplID, "));")
res <- RODBC::sqlQuery(ch, strsql) %>% ensure_data_is_returned
res <- RODBC::sqlQuery(ch, strsql)
res <- RODBC::sqlQuery(ch, strsql) %>% ensure_insert_success
dt
NA - 1
1- NA
library(pitr)
library(pitr)
library(pitr)
library(lubridate)
library(pitr)
library(purrr)
library(git2r)
data.folder <- sprintf("%s/%s", here::here("../../../Data"), year(now()))
repos <- list.files(data.folder, pattern = "Plot.+", include.dirs = TRUE,
full.names = TRUE, recursive = FALSE, no.. = TRUE)
# Pull new data from repos if any
pitr_pull_from_repo(repos,
pub = "C:/Users/fifieldd/OneDrive - EC-EC/SSH keys/gull-island@github_ed25519.pub",
priv = "C:/Users/fifieldd/OneDrive - EC-EC/SSH keys/gull-island@github_ed25519",
passphrase = "dave1965")
pitdb_process_data_downloads(
db = here::here("../../../Data/Burrow logger master0.1.accdb"),
path = repos,
log_level = "DEBUG", sleep_time = "06:45:00")
db
here::here("../../../Data/Burrow logger master0.1.accdb")
