% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/load_file.R
\name{pitdb_load_file}
\alias{pitdb_load_file}
\title{Load a PIT tag datafile into a database.}
\usage{
pitdb_load_file(
  ch = NULL,
  filename = NULL,
  date_ = NULL,
  fetch_type = "WiFi",
  from_date = NULL,
  to_date = NULL,
  limit_to_deploy_dates = TRUE,
  limit_to_known_prefix = TRUE,
  ignore_test_board = TRUE,
  test_board_ID = 1,
  record_non_reporters = TRUE,
  display_non_reporters = TRUE,
  parse_summary = FALSE,
  ignore_insert_errors = FALSE,
  compare_full_pathname = FALSE,
  verbose = FALSE,
  debug = FALSE
)
}
\arguments{
\item{ch}{Channel to open database returned from \code{pitdb.open}.}

\item{filename}{Path to file containing data dumped from a monitor board.}

\item{date_}{Date on which the data was downloaded. Normally this is parsed
from the \code{filename} but it can be over-ridden with this argument.Used to find all boards
deployed on this date and find boards not reporting any data. See \code{display_non_reporters}.}

\item{fetch_type}{How the data was fetched from the board. Valid values are
 "WiFi" and "CableConnect".
#'@param ignore_test_board Should data from the test board (normally #1) be ignored. Default = \code{TRUE}.}

\item{from_date}{(default = NUll) minimum date to accept in data from file. Data with dates outside the range
\code{from_date to  to_date} will not be imported into the database.}

\item{to_date}{(default = NULL) maximum date to accept in data from file. \code{from_date/to_date} override
\code{limit_to_deploy_dates} if supplied.}

\item{limit_to_deploy_dates}{(default = \code{TRUE}). Only data within the range of dates that the board was deployed will
be imported. This is usefule to exclude data recorded before or after deployment (e.g. at the office).}

\item{limit_to_known_prefix}{If \code{TRUE} (the default) only tag IDs with a known prefix (see \code{lkpSpecialTags} in the database)
will be inserted into the database. This is useful to ignore ghost tag reads.}

\item{test_board_ID}{The board ID of the test board (normally 1). Used to ignore testing data.}

\item{record_non_reporters}{(default \code{TRUE}) Should boards not reporting data in file be recorded in database?
Only makes sense when \code{fetch_type} is "WiFi" and gives an error if this is not the case.
Non-reporting boards will be added to tbl_NonReport.}

\item{display_non_reporters}{Produce warning message for any deployed boards
not reporting data in \code{filename} when \code{record_non_reporters}.}

\item{parse_summary}{Print a summary of the parsed data file (default = \code{FALSE})}

\item{ignore_insert_errors}{(default \code{FALSE}). If \code{TRUE}, then ignore errors when attempting to insert records
into tag_reads, statuses, uploads, and bad_recs and print a warning instead. If \code{FALSE} then an error message is printed and execution terminates.
Setting this to \code{TRUE} can be useful when loading a file downloaded from a board via
direct \code{CableConnect} to ensure that no data (previously inserted via "WiFi" downloaded file) were missed.}

\item{compare_full_pathname}{(default \code{FALSE}) If true then compare entire pathname when checking to see if \code{filename}
has been previously imported (wehn comparing against \code{Filename} field in tblImports). Normally only the filename
itself is compared (vi \code{basename()}). Normally, (for years >= 2017) each downloaded filename contains a
unique timestamp so comparing \code{basename(filename)} is sufficient and desirable since it allows data files
to be moved to a new folder and still detect that they have been previously imported. However, in 2016 boards were downloaded
(sometimes) multiple times with names like \code{P2_44.txt} (for burrow 2, board 44) and placed in different folders. Setting
this option to TRUE will allow for importing of such data.}

\item{verbose}{(default \code{FALSE}) show inserted data, and warning messages upon attempting to insert a duplicate
tag_read, status, upload, or bad_rec record when \code{ignore_insert_errors} is \code{TRUE}.}
}
\value{
Returns TRUE on success and FALSE on error.
}
\description{
The function will load a datafile downloaded from a PIT tag
 monitor board into a Microsoft Access database.
}
\details{
This function reads a text file of records that have been extracted
 from a monitor board and imports them into the database indicated by
 \code{channel}. These files are typically downloaded via direct cable
 connection or received from a Raspberry Pi base station.

 In most cases \code{filename} will contain info from multiple monitor
 boards, e.g., the daily files from a Raspberry Pi base station. In
 this case, it is helpful to know which deployed boards failed to send their
 data that day. If  \code{detect_non_reporters} = \code{TRUE},
 \code{pitdb_load_file} will issue a warning message listing any boards that
 are currently deployed (as defined in tblBoardDeploy in the Access database)
 but did not provide any data in \code{filename}. The meaning of "currently"
 in the last sentence means "on the date that the data was download" which
 comes from the filename but which can be overridded by \code{date}.

 What it does in the database......

 inserts records one by one in case an insert fails, prints warning regarding
 failed inserts.

 talk about format of filename somewhere

 deal with different data formats in 2016 and 2017

 deal with conversion of voltages and MCU temperature

 prints a summary of what was done (consider how this is done: jsut via print
 or does it return a summary object which has a print method...probably just
 print it - easier).

 Decide what to do about unknown tag IDs (legitimate and ghost reads) since
 the database currently requires all tags in tblTagRead table to exist
 apriori in tblTags. Should they go in some other table, or just be
 discarded. Put them in failed load table.

 talk about creation of a tblImports record.

 deal with "Bad record" rows
}
\section{Sanity checks}{


 \itemize{ \item detects any board not reporting if
 \code{detect_non_reporters} = TRUE. \item issues a warning (and fails to add
 record) if an attempt is made to import a record that already exists. \item
 issues a warning (and fails to add record) if a tag_read record refers to an
 unknown tag ID. This could be either a legitimate tag that has not been
 added to the database or a so-called \emph{ghost read}. Ghost reads
 were previously generated b/c the noise data coming from the MLX90109 chip when
 no tag was present was continuously read and interpreted as a potential EM4102
  data stream.
 As of rfid board software version 1.8,
 Ghost reads are (should be?) entirely eliminated, b/c the data stream is only
 treated as valid when the duty cycle is approximately 50% (40%-60% in practice)
 indicating that a tag is present in the antenna.

 A previous fix as a stop-gap measure, implemented in version 1.1, involved
 only recording tags with specific known prefixes (hardcoded into software)
  of existing tags.
 However, it was still remotely
 possible that a ghost read with a known prefix could occur. The number of
 reads field is always 1 (??) in a ghost read, but rarely so for a true tag
 read. Setting \code{detect_ghost_reads} = \code{TRUE} will issue a warning
 for any reads of valid tag IDs where the number of reads is 1. }
}

\section{Author}{
 Dave Fifield
}

